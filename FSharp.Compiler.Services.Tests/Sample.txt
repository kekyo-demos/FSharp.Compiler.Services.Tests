ModuleOrNamespace: [Persimmon; Sample]
  Module Let:
      Underscore
    Named: 'test1'
    App (Expr0):
      App (Expr0):
        Ident: test
      App (Expr1):
        Const:
          String: "success test"
    App (Expr1):
      CompExpr:
  Module Let:
      Underscore
    Named: 'test2'
    App (Expr0):
      App (Expr0):
        Ident: test
      App (Expr1):
        Const:
          String: "failure test"
    App (Expr1):
      CompExpr:
  Module Let:
      Underscore
    Named: 'test3'
    App (Expr0):
      App (Expr0):
        Ident: test
      App (Expr1):
        Const:
          String: "exn test"
    App (Expr1):
      CompExpr:
        LetOrUse (Expr):
          LongIdent: f
          Sequential: SequencePointsAtSeq
            [0]:
              App (Expr0):
                Ident: raise
              App (Expr1):
                Ident: MyException
            [1]:
              Const:
        LetOrUse (Body):
  Module Let:
    LongIdent: err
    App (Expr0):
      Ident: failwith
    App (Expr1):
      Const:
        String: "oops!"
  Module Let:
      Underscore
    Named: 'test4'
    App (Expr0):
      App (Expr0):
        Ident: test
      App (Expr1):
        Const:
          String: "error test"
    App (Expr1):
      CompExpr:
        Sequential: SequencePointsAtSeq
          [0]:
          [1]:
  Module Let:
      Underscore
    Named: 'tests'
    ArrayOrListOfSeqExpr:
      CompExpr:
        Sequential: SequencePointsAtSeq
          [0]:
            App (Expr0):
              App (Expr0):
                Ident: test
              App (Expr1):
                Const:
                  String: "success test(list)"
            App (Expr1):
              CompExpr:
          [1]:
            App (Expr0):
              App (Expr0):
                Ident: test
              App (Expr1):
                Const:
                  String: "failure test(list)"
            App (Expr1):
              CompExpr:
  Module Let:
      Underscore
    Named: 'tests2'
    ArrayOrListOfSeqExpr:
      CompExpr:
        Sequential: SequencePointsAtSeq
          [0]:
            App (Expr0):
              App (Expr0):
                Ident: test
              App (Expr1):
                Const:
                  String: "success test1(array)"
            App (Expr1):
              CompExpr:
          [1]:
            Sequential: SequencePointsAtSeq
              [0]:
                App (Expr0):
                  App (Expr0):
                    Ident: test
                  App (Expr1):
                    Const:
                      String: "success test2(array)"
                App (Expr1):
                  CompExpr:
              [1]:
                App (Expr0):
                  App (Expr0):
                    Ident: test
                  App (Expr1):
                    Const:
                      String: "failure test(array)"
                App (Expr1):
                  CompExpr:
  Module Let:
      Underscore
    Named: 'tests3'
    App (Expr0):
      Ident: seq
    App (Expr1):
      CompExpr:
        YieldOrReturn:
          App (Expr0):
            App (Expr0):
              Ident: test
            App (Expr1):
              Const:
                String: "failure test(seq)"
          App (Expr1):
            CompExpr:
  Module Let:
      Underscore
    Named: 'tests32'
    App (Expr0):
      Ident: seq
    App (Expr1):
      CompExpr:
        Sequential: SequencePointsAtSeq
          [0]:
            YieldOrReturn:
              App (Expr0):
                App (Expr0):
                  Ident: test
                App (Expr1):
                  Const:
                    String: "success test(seq)"
              App (Expr1):
                CompExpr:
          [1]:
            YieldOrReturn:
              App (Expr0):
                App (Expr0):
                  Ident: test
                App (Expr1):
                  Const:
                    String: "failure test(seq)"
              App (Expr1):
                CompExpr:
  Module Let:
      Underscore
    Named: 'tests4'
    ArrayOrListOfSeqExpr:
      CompExpr:
        Sequential: SequencePointsAtSeq
          [0]:
            App (Expr0):
              App (Expr0):
                Ident: test
              App (Expr1):
                Const:
                  String: "success test(list with value)"
            App (Expr1):
              CompExpr:
                YieldOrReturn:
                  Const:
          [1]:
            App (Expr0):
              App (Expr0):
                Ident: test
              App (Expr1):
                Const:
                  String: "failure test(list with value)"
            App (Expr1):
              CompExpr:
                Sequential: SequencePointsAtSeq
                  [0]:
                  [1]:
                    YieldOrReturn:
                      Const:
  Module Let:
      Underscore
    Named: 'tests5'
    App (Expr0):
      Ident: parameterize
    App (Expr1):
      CompExpr:
        Sequential: SequencePointsAtSeq
          [0]:
            App (Expr0):
              Ident: case
            App (Expr1):
              Paren:
          [1]:
            Sequential: SequencePointsAtSeq
              [0]:
                App (Expr0):
                  Ident: case
                App (Expr1):
                  Paren:
              [1]:
                App (Expr0):
                  Ident: run
                App (Expr1):
                  Paren:
                    Lambda:
                      SimplePat.Id: 'x'
                      SimplePat.Id: 'y'
                      App (Expr0):
                        App (Expr0):
                          Ident: test
                        App (Expr1):
                          Const:
                            String: "case parameterize test"
                      App (Expr1):
                        CompExpr:
  Module Let:
      Underscore
    Named: 'tests6'
    LetOrUse (Expr):
      LongIdent: innerTest
      App (Expr0):
        App (Expr0):
          Ident: test
        App (Expr1):
          Const:
            String: "source parameterize test"
      App (Expr1):
        CompExpr:
    LetOrUse (Body):
      App (Expr0):
        Ident: parameterize
      App (Expr1):
        CompExpr:
          Sequential: SequencePointsAtSeq
            [0]:
              App (Expr0):
                Ident: source
              App (Expr1):
                ArrayOrListOfSeqExpr:
                  CompExpr:
                    Sequential: SequencePointsAtSeq
                      [0]:
                        Paren:
                      [1]:
                        Paren:
            [1]:
              App (Expr0):
                Ident: run
              App (Expr1):
                Ident: innerTest
  Module Let:
      Underscore
    Named: 'context1'
    App (Expr0):
      App (Expr0):
        Ident: context
      App (Expr1):
        Const:
          String: "Hoge"
    App (Expr1):
      ArrayOrListOfSeqExpr:
        CompExpr:
          App (Expr0):
            App (Expr0):
              Ident: context
            App (Expr1):
              Const:
                String: "Piyo"
          App (Expr1):
            ArrayOrListOfSeqExpr:
              CompExpr:
                Sequential: SequencePointsAtSeq
                  [0]:
                    App (Expr0):
                      App (Expr0):
                        Ident: test
                      App (Expr1):
                        Const:
                          String: "success(context)"
                    App (Expr1):
                      CompExpr:
                  [1]:
                    App (Expr0):
                      App (Expr0):
                        Ident: test
                      App (Expr1):
                        Const:
                          String: "failure(context)"
                    App (Expr1):
                      CompExpr:
  Module Types:
    TypeDefn: MyClass
    Type Let:
        Underscore
      Named: 'test1'
      App (Expr0):
        App (Expr0):
          Ident: test
        App (Expr1):
          Const:
            String: "success test(class let)"
      App (Expr1):
        CompExpr:
    Type Member:
      LongIdent: __.test2
      App (Expr0):
        App (Expr0):
          Ident: test
        App (Expr1):
          Const:
            String: "not execute because this is instance method"
      App (Expr1):
        CompExpr:
    Type Member:
        Underscore
      Named: 'test3'
      App (Expr0):
        App (Expr0):
          Ident: test
        App (Expr1):
          Const:
            String: "failure test(static property)"
      App (Expr1):
        CompExpr:
  Module Let:
    LongIdent: helperTest
    App (Expr0):
      Ident: assertions
    App (Expr1):
      CompExpr:
